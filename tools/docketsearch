#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import argparse
import functools
import json
import logging
import multiprocessing
import os
import signal
import sys

logging.basicConfig(level=logging.INFO)

def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--docket-num", dest="docket_num", type=int)
  parser.add_argument("-p", "--parallel", dest="parallel", default=1, type=int)
  parser.add_argument("-q", "--query", dest="query", nargs="*")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args

def query (path, terms):
  with open("%s/indexes.json" % (path), "rb") as idxf:
    obj = json.loads(idxf.read())
    for (fname, grms) in obj.items():
      found = {}
      for term in terms:
        glen = len(term.split())
        try:
          wd = grms["%d-gram" % (glen)]
          if term in wd:
            found[term] = wd[term]
        except KeyError:
          continue
      if len(found) == len(terms):
        tcountlist = []
        for t,c in found.items():
          tcountlist.append("[%d] %s" % (c, t))
        logging.info("Terms found in %s/%s: %s" % (path, fname, ", ".join(tcountlist)))
        

if __name__ == '__main__':
  opts = parse_args()

  rootpath = "%s/OT-%d/dockets" % (opts.root, opts.term)

  if opts.docket_num:
    path = "%s/%d" % (rootpath, opts.docket_num)
    query(path, opts.query)
    sys.exit(0)

  sigint_h = signal.signal(signal.SIGINT, signal.SIG_IGN) # Ignore child sigint
  pool = multiprocessing.Pool(processes = opts.parallel)
  signal.signal(signal.SIGINT, sigint_h) # But not here

  ddirs = []
  for name in os.listdir(rootpath):
    dpath = "%s/%s" % (rootpath, name)
    if os.path.isdir(dpath):
      ddirs.append(dpath)

  try:
    res = pool.map_async(functools.partial(query, terms=opts.query), ddirs)
    res.get(45)
  except KeyboardInterrupt:
    pool.terminate()
  else:
    pool.close()

  pool.join()

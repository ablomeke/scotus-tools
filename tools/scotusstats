#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import argparse
import json
import logging
import os
import os.path
import pprint
import sys

import scotus.util
from scotus.attorneys import ATTYMAP
from scotus.courts import NAMEMAP as LCNAMEMAP

logging.basicConfig(level=logging.DEBUG)

def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("--ifp", dest="ifp", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  parser.add_argument("--write", dest="write", action="store_true")
  args = parser.parse_args()
  return args


def build_stats (opts, path):
  sdata = {"denied" : 0, "granted" : 0, "pending" : 0, "summary" : 0, "decided" : 0, "dismissed" : 0, "gvr" : 0,
           "pro-se" : 0, "grants" : [], "pends" : [], "decides" : [], "dismissals" : [] }

  lower_courts = {}
  attys = {}
  amici_attys = {}
  gattys = {}
  pdattys = {}

  ddirs = os.listdir(path)
  for ddir in ddirs:
    try:
      if int(ddir) > 4999 and not opts.ifp:
        continue
    except ValueError: # Not an integer
      continue

    dpath = "%s/%s/docket.json" % (path, ddir)
    if not os.path.exists(dpath):
      continue
    docket_obj = json.loads(open(dpath, "rb").read())

    docket = scotus.util.DocketStatusInfo(docket_obj)

    for pa in docket.attys_petitioner:
      if pa == docket.atty_petitioner_prose:
        sdata["pro-se"] += 1
        continue
      try:
        aobj = ATTYMAP[pa]
        if aobj.isGov(docket.docket_date):
          gattys.setdefault(aobj, [0])[0] += 1
        elif aobj.isPD(docket.docket_date):
          pdattys.setdefault(aobj, [0])[0] += 1
        else:
          attys.setdefault(aobj, [0])[0] += 1
        continue
      except KeyError:
        pass
      attys.setdefault(pa, [0])[0] += 1

    for ra in docket.attys_respondent:
      try:
        aobj = ATTYMAP[ra]
        if aobj.isGov(docket.docket_date):
          gattys.setdefault(aobj, [0])[0] += 1
        elif aobj.isPD(docket.docket_date):
          pdattys.setdefault(aobj, [0])[0] += 1
        else:
          attys.setdefault(aobj, [0])[0] += 1
        continue
      except KeyError:
        pass
      attys.setdefault(ra, [0])[0] += 1

    for aa in docket.attys_amici:
      try:
        aobj = ATTYMAP[aa]
        amici_attys.setdefault(aa, [0])[0] += 1
      except KeyError:
        pass
      amici_attys.setdefault(aa, [0])[0] += 1

    lcabbr = None
    if docket.lowercourt:
      for k,v in LCNAMEMAP.items():
        if v == docket.lowercourt:
          lcabbr = k
          break
    lower_courts.setdefault(lcabbr, [0])[0] += 1

    if docket.gvr:
      sdata["gvr"] += 1
      continue

    if docket.pending:
      if docket.granted:
        if docket.argued:
          continue

        sdata["granted"] += 1
        sdata["grants"].append(int(ddir))
        continue

      sdata["pending"] += 1
      sdata["pends"].append(int(ddir))

      continue

    if docket.judgment_issued:
      sdata["decided"] += 1
      sdata["decides"].append(int(ddir))

    if docket.dismissed:
      sdata["dismissed"] += 1
      sdata["dismissals"].append(int(ddir))

    if docket.denied:
      sdata["denied"] += 1

  def tryunicode(val):
    try:
      return unicode(val, "utf-8")
    except TypeError:
      return val

  sdata["pends"].sort()
  sdata["grants"].sort()
  sdata["decides"].sort()
  sdata["dismissals"].sort()
  lc_counts = [(str(k), v[0]) for k,v in lower_courts.items()]
  lc_counts.sort(key = lambda x: x[1], reverse=True)
  atty_counts = [(str(k),v[0]) for k,v in attys.items()]
  atty_counts.sort(key = lambda x: x[1], reverse=True)
  gatty_counts = [(k.name,v[0]) for k,v in gattys.items()]
  gatty_counts.sort(key = lambda x: x[1], reverse=True)
  pdatty_counts = [(k.name,v[0]) for k,v in pdattys.items()]
  pdatty_counts.sort(key = lambda x: x[1], reverse=True)
  aatty_counts = [(str(k),v[0]) for k,v in amici_attys.items()]
  aatty_counts.sort(key = lambda x: x[1], reverse=True)

  if opts.write:
    sdata["_atty_counts"] = atty_counts
    sdata["_amici_atty_counts"] = aatty_counts
    sdata["_lower_courts"] = lc_counts
    with open("summary.json", "w+") as f:
      f.write(json.dumps(sdata))
    del sdata["_atty_counts"]
    del sdata["_lower_courts"]
    del sdata["_amici_atty_counts"]

    
  sdata["pends"] = ", ".join([str(x) for x in sdata["pends"]])
  sdata["grants"] = ", ".join([str(x) for x in sdata["grants"]])
  sdata["decides"] = ", ".join([str(x) for x in sdata["decides"]])
  sdata["dismissals"] = ", ".join([str(x) for x in sdata["dismissals"]])

  sdata["party-attorneys"] = atty_counts[:10]
  sdata["gov-attorneys"] = gatty_counts[:10]
  sdata["pd-attorneys"] = pdatty_counts[:10]
  sdata["amici-attorneys"] = aatty_counts[:10]
  sdata["lower-courts"] = lc_counts[:10]

  pprint.pprint(sdata)


if __name__ == '__main__':
  scotus.util.setOutputEncoding()

  opts = parse_args()
  path = "%s/OT-%d/dockets" % (opts.root, opts.term)

  build_stats(opts, path)

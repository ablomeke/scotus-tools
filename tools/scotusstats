#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import argparse
import json
import logging
import os
import os.path
import pprint
import sys

import scotus.util

logging.basicConfig(level=logging.DEBUG)

def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("--ifp", dest="ifp", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args


def build_stats (opts, path):
  sdata = {"denied" : 0, "granted" : 0, "pending" : 0, "summary" : 0, "decided" : 0, "dismissed" : 0,
           "grants" : [], "pends" : [], "decides" : [], "dismissals" : [] }
  ddirs = os.listdir(path)
  for ddir in ddirs:
    try:
      if int(ddir) > 4999 and not opts.ifp:
        continue
    except ValueError: # Not an integer
      continue

    dpath = "%s/%s/docket.json" % (path, ddir)
    if not os.path.exists(dpath):
      continue
    docket_obj = json.loads(open(dpath, "rb").read())

    docket = scotus.util.DocketStatusInfo(docket_obj)
    if docket.pending:
      if docket.granted:
        if docket.argued:
          continue

        sdata["granted"] += 1
        sdata["grants"].append(int(ddir))
        continue

      sdata["pending"] += 1
      sdata["pends"].append(int(ddir))

      continue

    if docket.judgment_issued:
      sdata["decided"] += 1
      sdata["decides"].append(int(ddir))

    if docket.dismissed:
      sdata["dismissed"] += 1
      sdata["dismissals"].append(int(ddir))

    if docket.denied:
      sdata["denied"] += 1

#    try:
#      last_order = docket_obj["ProceedingsandOrder"][-1]["Text"]
#      if last_order.count("JUDGMENT ISSUED"):
#        sdata["decided"] += 1
#        sdata["decides"].append(int(ddir))
#        continue
#      elif last_order.count("Petition Dismissed"):
#        sdata["dismissed"] += 1
#        sdata["dismissals"].append(int(ddir))
#        continue
#        
#    except IndexError:
#      logging.debug("No proceedings for %s" % (ddir))
#
#    spath = "%s/%s/status.json" % (path, ddir)
#    if not os.path.exists(spath):
#      if not opts.ifp and int(ddir) > 4999:
#        continue
#      sdata["pending"] += 1
#      sdata["pends"].append(int(ddir))
#      continue
#
#    ddata = json.loads(open(spath, "rb").read())
#    if ddata["status"] == "DENIED":
#      sdata["denied"] += 1
#    elif ddata["status"] == "GRANTED":
#      sdata["granted"] += 1
#      sdata["grants"].append(int(ddir))
#    elif ddata["status"] == "SUMMARY":
#      sdata["summary"] += 1

  sdata["pends"].sort()
  sdata["grants"].sort()
  sdata["decides"].sort()
  sdata["dismissals"].sort()
    
  sdata["pends"] = ", ".join([str(x) for x in sdata["pends"]])
  sdata["grants"] = ", ".join([str(x) for x in sdata["grants"]])
  sdata["decides"] = ", ".join([str(x) for x in sdata["decides"]])
  sdata["dismissals"] = ", ".join([str(x) for x in sdata["dismissals"]])

  pprint.pprint(sdata)


if __name__ == '__main__':
  opts = parse_args()
  path = "%s/OT-%d/dockets" % (opts.root, opts.term)

  build_stats(opts, path)

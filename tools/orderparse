#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import json
import os
import pprint
import sys
import unicodedata

import PyPDF2

SECTIONS = {
  "CERTSUM" : "SUMMARY DISPOSITION",
  "PENDING" : ["ORDERS IN PENDING CASES", "ORDER IN PENDING CASE"],
  "CERTDENY" : "CERTIORARI DENIED",
  "HABEASDENY" : "HABEAS CORPUS DENIED",
  "MANDAMUSDENY" : "MANDAMUS DENIED",
  "REHEARDENY" : ["REHEARINGS DENIED", "REHEARING DENIED"],
  "DISCIPLINE" : "ATTORNEY DISCIPLINE",
  "PROHIBDENY" : "PROHIBITION DENIED",
  "GRANTS" : "CERTIORARI GRANTED",
  "DECISION" : "Cite as",
  "POSTPONE" : "JURISDICTION POSTPONED",
}

# Translation table to strip unicode punctuation, but not things like section symbols
TTABLE = { i:None for i in xrange(sys.maxunicode)
           if unicodedata.category(unichr(i)).startswith('P') }


def count_seal(fname):
  seal_count = 0
  fo = open(fname, "rb")
  reader = PyPDF2.PdfFileReader(fo)
  for page in range(reader.numPages):
    for line in reader.getPage(page).extractText().split("\n"):
      if line.count("seal"):
        seal_count += 1
  if seal_count:
    print "%s: %d" % (fname, seal_count)

def count_word(word, fname):
  word_count = {}
  fo = open(fname, "rb")
  reader = PyPDF2.PdfFileReader(fo)
  cur_section = None
  for page in range(reader.numPages):
    for line in reader.getPage(page).extractText().split("\n"):
      for shortname,secname in SECTIONS.items():
        if isinstance(secname, (list, tuple)):
          for name in secname:
            if line.count(name):
              cur_section = shortname
              break
        else:
          if line.count(secname):
            cur_section = shortname
            break
      if line.count(word):
        word_count.setdefault(cur_section, [0])[0] += 1
  if word_count:
    for section,count in word_count.items():
      print "%s: [%s] %d" % (fname, section, count[0])

def count_section_word (section, word, name):
  sec_text = SECTIONS[section]
  in_section = False
  word_count = 0
  fo = open(name, "rb")
  reader = PyPDF2.PdfFileReader(fo)
  for page in range(reader.numPages):
    for line in reader.getPage(page).extractText().split("\n"):
      if in_section:
        for possible in SECTIONS.values():
          if isinstance(possible, (list, tuple)):
            for name in possible:
              if line.count(name):
                in_section = False
                break
          else:
            if line.count(possible):
              in_section = False
              break
        if line.count(word):
          word_count += 1
      else:
        if line.count(sec_text):
          in_section = True

  if word_count:
    print "[%s] %s: %d" % (sec_text, name, word_count)


def list_word(word):
  for name in os.listdir("."):
    if name.count(".pdf"):
      count_word(word, name)

def list_section_word (word, section):
  for name in os.listdir("."):
    if name.count(".pdf"):
      count_section_word(section, word, name)

def check_start_section (line):
  for k,possible in SECTIONS.items():
    if isinstance(possible, (list, tuple)):
      for name in possible:
        if line.count(name):
          return (k,name)
    else:
      if line.count(possible):
        return (k,possible)
  return False

def check_docket_num (line):
  if line[:10].count("-"):
    try:
      int(line[:10].split("-")[0])
    except ValueError:
      return False
    return line.split()[0]
  return False


def dumplines (path):
  text = []
  fo = open(path, "rb")
  reader = PyPDF2.PdfFileReader(fo)
  for page in range(reader.numPages):
    for line in reader.getPage(page).extractText().translate(TTABLE).split("\n"):
      print line

def isCasename (tline):
  # The text is likely a case name if it is:
  # - Not a known section name
  # - All uppercase
  # - Mostly uppercase

  if tline == tline.upper():
    return True

  ucount = 0.0
  skip = 0
  for char in tline:
    if char.isupper():
      ucount += 1
    elif char.isspace():
      skip += 1

  if ucount / (len(tline) - skip) > 0.75:
    return True

  return False

def parse_statuses (reader):
  data = {x:[] for x in SECTIONS.keys()}
  cur_section = ""

  for page in range(reader.numPages):
    for line in reader.getPage(page).extractText().split("\n"):
      sec = check_start_section(line)
      if sec:
        cur_section = sec[0]
        if cur_section == "DECISION" or cur_section == "DISCIPLINE":
          return data
        continue
      docket = check_docket_num(line)
      if docket:
        try:
          data[cur_section].append(docket)
        except KeyError:
          print "Docket %s found without section" % (docket)
      else:
        # If we only have an integer, it's a page number
        try:
          pgnum = int(line.strip())
          continue
        except ValueError:
          pass

        tline = line.translate(TTABLE)
        # Consolidated / vided / etc.
        if not tline:
          continue

        if isCasename(tline):
          continue

  return data

STATUS_MAP = {
  "CERTSUM" : "SUMMARY",
  "PENDING" : None,
  "CERTDENY" : "DENIED",
  "HABEASDENY" : "DENIED",
  "MANDAMUSDENY" : "DENIED",
  "PROHIBDENY" : "DENIED",
  "REHEARDENY" : "DENIED",
  "GRANTS" : "GRANTED",
  "POSTPONE" : "GRANTED"
}

def catalog (path):
  fo = open(path, "rb")
  reader = PyPDF2.PdfFileReader(fo)

  status_data = parse_statuses(reader)
  for k,v in status_data.items():
    for docket in v:
      (term, num) = docket.split("-")
      docket_dir = "OT-%s/dockets/%s" % (term, num)
      if not os.path.exists(docket_dir):
        os.makedirs(docket_dir)

      status_path = "OT-%s/dockets/%s/status.json" % (term, num)
      data = {"events" : [], "status" : None, "files" : []}
      fname = path.split("/")[-1]
      if os.path.exists(status_path):
        ndata = json.loads(open(status_path, "rb").read())
        if "files" in ndata: # Start over if we don't have a file roster
          if fname in ndata["files"]: # We've already added events from this order list
            continue
          data = ndata
      data["events"].append((k, fname))
      if STATUS_MAP[k]:
        data["status"] = STATUS_MAP[k]
      data["files"].append(fname)
      with open(status_path, "w+") as f:
        f.write(json.dumps(data))


if __name__ == '__main__':
  if sys.argv[1] == "CATALOG":
    catalog(sys.argv[2])
    sys.exit()
  elif sys.argv[1] == "DUMP":
    dumplines(sys.argv[2])
    sys.exit()

  os.chdir("OT-%d/orders/" % (int(sys.argv[1])))
  if sys.argv[2] == "ANY":
    list_word(sys.argv[3])
  else:
    list_section_word(sys.argv[3], sys.argv[2])
  os.chdir("..")

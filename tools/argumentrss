#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import argparse
import json
import logging
import os
import sys

import BeautifulSoup as BS
from feedgen.feed import FeedGenerator
import requests

from scotus.exceptions import NoDocketError
import scotus.util

logging.basicConfig(level=logging.DEBUG)

HEADERS = {"User-Agent" : "SCOTUS Argument Grabber (https://github.com/fterbo/scotus-tools)"}
BASE = "https://www.supremecourt.gov/oral_arguments/argument_audio"
MP3URL = "https://www.supremecourt.gov/media/audio/mp3files/%s.mp3"

def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args

def valid_xml_char (char):
  cp = ord(char)
  return (0x20 <= cp <= 0xD7FF or
          cp in (0x9, 0xA, 0xD) or
          0xE000 <= cp <= 0xFFFD or
          0x10000 <= cp <= 0x10FFFFF)

def GET (url):
  logging.debug("GET: %s" % (url))
  return requests.get(url, headers=HEADERS)

def build (term, root):
  r = GET("%s/20%d" % (BASE, term))
  if r.status_code != 200:
    print r.status_code
    sys.exit(1)

  fg = FeedGenerator()
  fg.load_extension("podcast")
  fg.title("Oral Arguments for OT-%d" % (term))
  fg.description("RSS Feed for Supreme Court Oral Arguments")
  fg.link(href = "Bar")

  roote = BS.BeautifulSoup(r.content)
  links = roote.findAll("a")
  for link in links:
    href = link.get("href")
    if href and href.split("/")[-1].count("-"):
      try:
        (cterm, cdocket) = href.split("/")[-1].split("-")
        cterm = int(cterm)
        if cdocket.count("rearg"):
          cdocket = cdocket[:-5]
      except ValueError:
        continue

      if cdocket== "Orig":
        jpath = "%s/Orig/dockets/%d/docket.json" % (root, cterm)
      else:
        jpath = "%s/OT-%d/dockets/%s/docket.json" % (root, cterm, cdocket)
      if not os.path.exists(jpath):
        raise NoDocketError(jpath)

      docket_obj = json.loads(open(jpath, "rb").read())
      info = scotus.util.DocketStatusInfo(docket_obj)
      qptxt = info.getQPText()

      fe = fg.add_entry()
      aurl = MP3URL % (info.audiodocketstr)
      fe.id(aurl)
      fe.title("%s: %s" % (info.audiodocketstr, info.casename))
      fe.description(''.join(x for x in unicode(qptxt, encoding="utf-8") if valid_xml_char(x)))
      fe.link(href = aurl)
      fe.enclosure(aurl, 0, "audio/mpeg")

  fg.rss_file("OT-%d.xml" % (term))
      

if __name__ == '__main__':
  opts = parse_args()

  build(opts.term, opts.root)

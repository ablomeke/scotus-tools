#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

from __future__ import print_function

import argparse
import json
import logging
import os
import os.path
import pprint
import sys

from scotus import util

logging.basicConfig(level=logging.INFO)

LCNAMEMAP = {
  "CA1" : "United States Court of Appeals for the First Circuit",
  "CA2" : "United States Court of Appeals for the Second Circuit",
  "CA3" : "United States Court of Appeals for the Third Circuit",
  "CA4" : "United States Court of Appeals for the Fourth Circuit",
  "CA5" : "United States Court of Appeals for the Fifth Circuit",
  "CA6" : "United States Court of Appeals for the Sixth Circuit",
  "CA7" : "United States Court of Appeals for the Seventh Circuit",
  "CA8" : "United States Court of Appeals for the Eighth Circuit",
  "CA9" : "United States Court of Appeals for the Ninth Circuit",
  "CA10" : "United States Court of Appeals for the Tenth Circuit",
  "CA11" : "United States Court of Appeals for the Eleventh Circuit",
  "CADC" : "United States Court of Appeals for the DC Circuit",
  "CAFC" : "United States Court of Appeals for the Federal Circuit",
}

class NoDocketError(Exception):
  def __init__ (self, docketstr):
    self.docket = docketstr
  def __str__ (self):
    return "No docket info found for %s" % (self.docket)


def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--num", dest="num", type=int)
  parser.add_argument("-s", "--scan", dest="scan", action="store_true")
  parser.add_argument("-l", "--lower", dest="lower", type=int, default=0)
  parser.add_argument("--debug", dest="debug", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args


def scan(opts):
  ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term))]
  ddirs.sort()
  for ddir in ddirs:
    jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, ddir)
    docket_str = "%d-%d" % (opts.term, ddir)
    if not os.path.exists(jpath):
      continue
#      raise NoDocketError(docket_str)

    docket_obj = json.loads(open(jpath, "rb").read())
    casename = util.buildCasename(docket_obj)
    if opts.debug:
      if docket_obj["LowerCourt"] not in LCNAMEMAP.values():
        print("Unknown Lower Court: %s" % (docket_obj["LowerCourt"]))
      
    if opts.lower:
      if docket_obj["LowerCourt"].strip() != LCNAMEMAP[opts.lower]:
        continue

    print("[%s] %s" % (docket_str, casename))


def summarize(opts):
  jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, opts.num)
  docket_str = "%d-%d" % (opts.term, opts.num)
  if not os.path.exists(jpath):
    raise NoDocketError(docket_str)

  docket_obj = json.loads(open(jpath, "rb").read())
  casename = util.buildCasename(docket_obj)
  last_order = docket_obj["ProceedingsandOrder"][-1]

  print("[%s] %s" % (docket_str, casename))
  print("\t%s" % (docket_obj["LowerCourt"]))
  print("\t%s - %s" % (docket_obj["LowerCourtCaseNumbers"], docket_obj["LowerCourtDecision"]))
  print()
  print("\t%s - %s" % (last_order["Date"], last_order["Text"]))

if __name__ == '__main__':
  opts = parse_args()
  if opts.scan:
    scan(opts)
  else:
    summarize(opts)

#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

from __future__ import print_function

import argparse
import datetime
import dateutil.parser
import json
import logging
import os
import os.path
import pprint
import sys

from scotus import util
from scotus.courts import NAMEMAP as LCNAMEMAP
from scotus.exceptions import NoDocketError
import scotus.parse

logging.basicConfig(level=logging.INFO)



def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--num", dest="num", type=int)
  parser.add_argument("--stop", dest="stop", type=int)
  parser.add_argument("-s", "--scan", dest="scan", action="store_true")
  parser.add_argument("--ifp", dest="ifp", action="store_true")
  parser.add_argument("-l", "--lower", dest="lower", type=str, nargs="*", default=None)
  parser.add_argument("--conference", dest="conference", action="store_true")
  parser.add_argument("--conf-date", dest="conf_date", type=str, default=None)
  parser.add_argument("--relists", dest="relists", action="store_true")
  parser.add_argument("--unknown", dest="unknown", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args



def scan (opts):
  ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term)) if not x.startswith(".")]
  ddirs.sort()
  for ddir in ddirs:
    if opts.num:
      if int(ddir) < opts.num:
        continue

    if opts.stop:
      if int(ddir) > opts.stop:
        return
    elif int(ddir) > 4999 and not opts.ifp:
      return

    jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, ddir)
    docket_str = "%d-%d" % (opts.term, ddir)
    if not os.path.exists(jpath):
      continue
#      raise NoDocketError(docket_str)

    docket_obj = json.loads(open(jpath, "rb").read())
    info = util.DocketStatusInfo(docket_obj)
    if opts.unknown:
      if docket_obj["LowerCourt"]:
        if docket_obj["LowerCourt"] not in LCNAMEMAP.values():
          print("[%s] Unknown Lower Court: %s" % (docket_str, docket_obj["LowerCourt"]))
      continue
      
    if opts.lower:
      if not docket_obj["LowerCourt"]:
        continue
      found = False
      for lcabbr in opts.lower:
        if LCNAMEMAP[lcabbr] == docket_obj["LowerCourt"].strip():
          found = True
      if not found:
        continue

    cabbr = None
    for k,v in LCNAMEMAP.items():
      if v == info.lowercourt:
        cabbr = k
    print ("[%7s][%11s][%5s] %s %s" % (docket_str, info.casetype, cabbr, info.casename, info.getFlagString()))


def conference (opts):
  conf_date = opts.conf_date
  if not conf_date:
    d = datetime.date.today()
    if d.weekday() == 3:
      conf_date = d
    else:
      conf_date = d + datetime.timedelta(((3 - d.weekday()) + 7) % 7)
  conf_date = conf_date.date()
  if opts.relists:
    print("Relisted Petitions Considered at Conference on %s" % (conf_date.strftime("%Y-%m-%d")))
    print("---------------------------------------------------------")
  else:
    print("Petitions Considered at Conference on %s" % (conf_date.strftime("%Y-%m-%d")))
    print("------------------------------------------------")

  lower_set = set()
  lower_map = {}
  if opts.lower:
    for cabbr in opts.lower:
      lower_set.add(LCNAMEMAP[cabbr])
      lower_map[cabbr] = LCNAMEMAP[cabbr]
  else:
    lower_map = LCNAMEMAP

  ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term)) if not x.startswith(".")]
  ddirs.sort()
  for ddir in ddirs:
#    if int(ddir) > 4999 and not opts.ifp:
#      return

    jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, ddir)
    docket_str = "%d-%d" % (opts.term, ddir)
    if not os.path.exists(jpath):
      continue

    docket_obj = json.loads(open(jpath, "rb").read())
    info = util.DocketStatusInfo(docket_obj)

    if opts.relists:
      if len(info.distributed) < 2:
        continue

    if lower_set:
      if not docket_obj["LowerCourt"]:
        continue
      found = False
      for lc in lower_set:
        if lc == info.lowercourt:
          found = True
      if not found:
        continue

    for (edate, cdate) in info.distributed:
      if cdate == conf_date:
        cabbr = None
        for k,v in lower_map.items():
          if v == info.lowercourt:
            cabbr = k
        print ("[%s][%s][%s] %s %s" % (docket_str, info.casetype, cabbr, info.casename, info.getFlagString()))
        break


def summarize (opts):
  jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, opts.num)
  docket_str = "%d-%d" % (opts.term, opts.num)
  if not os.path.exists(jpath):
    raise NoDocketError(docket_str)

  docket_obj = json.loads(open(jpath, "rb").read())
  info = util.DocketStatusInfo(docket_obj)

  last_order = docket_obj["ProceedingsandOrder"][-1]

  print("[%s] %s %s" % (docket_str, info.casename, info.getFlagString()))
  print("  - Docketed %s" % (info.docket_date.strftime("%Y-%m-%d")))
  if info.related:
    print ("  - RELATED")
    for ri in info.related:
      print ("      (%d-%d, %s)" % (ri[0], ri[1], ri[2]))
  if info.distributed:
    print("  - Distributed: %s" % (", ".join([x[1].strftime("%Y-%m-%d") for x in info.distributed])))
  if docket_obj["LowerCourt"]:
    print("  - Lower Court")
    print("     %s" % (docket_obj["LowerCourt"]))
    print("     %s - %s" % (docket_obj["LowerCourtCaseNumbers"], docket_obj["LowerCourtDecision"]))
  if info.cert_amici:
    print("  - Cert Amici")
    for amicus in info.cert_amici:
      print("      %s" % (amicus))
  print("  - Last Order")
  print("     %s - %s" % (last_order["Date"], last_order["Text"]))
  if info.petition_path:
#    qp = scotus.parse.getQP("%s/%s" % (opts.root, info.petition_path))
#    if qp:
#      print("  - QP(1)")
#      print("      %s" % (" ".join(qp)))
    qp2 = scotus.parse.getQP2("%s/%s" % (opts.root, info.petition_path))
    if qp2:
      print("  - QP")
      print("      %s" % (" ".join(qp2)))



if __name__ == '__main__':
  util.setOutputEncoding()

  opts = parse_args()
  if opts.conf_date:
    opts.conf_date = dateutil.parser.parse(opts.conf_date)

  if opts.scan:
    scan(opts)
  elif opts.conference:
    conference(opts)
  else:
    summarize(opts)

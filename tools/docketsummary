#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

from __future__ import print_function

import argparse
import datetime
import dateutil.parser
import json
import logging
import os
import os.path
import pprint
import sys

from scotus import util
import scotus.parse

logging.basicConfig(level=logging.INFO)

LCNAMEMAP = {
  "None" : None,

  "CA1" : "United States Court of Appeals for the First Circuit",
  "CA2" : "United States Court of Appeals for the Second Circuit",
  "CA3" : "United States Court of Appeals for the Third Circuit",
  "CA4" : "United States Court of Appeals for the Fourth Circuit",
  "CA5" : "United States Court of Appeals for the Fifth Circuit",
  "CA6" : "United States Court of Appeals for the Sixth Circuit",
  "CA7" : "United States Court of Appeals for the Seventh Circuit",
  "CA8" : "United States Court of Appeals for the Eighth Circuit",
  "CA9" : "United States Court of Appeals for the Ninth Circuit",
  "CA10" : "United States Court of Appeals for the Tenth Circuit",
  "CA11" : "United States Court of Appeals for the Eleventh Circuit",
  "CADC" : util.CourtMatch("United States Court of Appeals for the DC Circuit",
                           "United States Court of Appeals for the District of Columbia Circuit"),
  "CAFC" : "United States Court of Appeals for the Federal Circuit",
  "CAAF" : "United States Court of Appeals for the Armed Forces",

  "caAK" : "Court of Appeals of Alaska",
  "caAL" : util.CourtMatch("Court of Criminal Appeals of Alabama",
                           "Court of Civil Appeals of Alabama").setStart("Circuit Court of Alabama"),
  "caAZ" : util.CourtMatch().setStart("Court of Appeals of Arizona"),
  "caCA" : util.CourtMatch().setStart("Court of Appeal of California"),
  "caCO" : "Court of Appeals of Colorado",
  "caCT" : "Appellate Court of Connecticut",
  "caDC" : "District of Columbia Court of Appeals",
  "caFL" : util.CourtMatch().setStart("District Court of Appeal of Florida"),
  "caGA" : "Court of Appeals of Georgia",
  "caIA" : "Court of Appeals of Iowa",
  "caID" : "Court of Appeals of Idaho",
  "caIL" : util.CourtMatch().setStart("Appellate Court of Illinois"),
  "caIN" : util.CourtMatch().setStart("Court of Appeals of Indiana"),
  "caKS" : "Court of Appeals of Kansas",
  "caKY" : "Court of Appeals of Kentucky",
  "caLA" : util.CourtMatch().setStart("Court of Appeal of Louisiana"),
  "caMA" : "Appeals Court of Massachusetts",
  "caMD" : util.CourtMatch("Court of Appeals of Maryland", "Court of Special Appeals of Maryland"),
  "caMI" : util.CourtMatch().setStart("Court of Appeals of Michigan"),
  "caMN" : "Court of Appeals of Minnesota",
  "caMO" : util.CourtMatch().setStart("Court of Appeals of Missouri"),
  "caMS" : "Court of Appeals of Mississippi",
  "caNB" : "Court of Appeals of Nebraska",
  "caNC" : "Court of Appeals of North Carolina",
  "caNJ" : "Superior Court of New Jersey, Appellate Division",
  "caNM" : "Court of Appeals of New Mexico",
  "caNV" : "Court of Appeals of Nevada",
  "caNY" : util.CourtMatch().setStart("Appellate Division, Supreme Court of New York"),
  "caOH" : util.CourtMatch().setStart("Court of Appeals of Ohio"),
  "caOK" : util.CourtMatch().setStart("Court of Civil Appeals of Oklahoma")
                            .setStart("Court of Criminal Appeals of Oklahoma"),
  "caOR" : "Court of Appeals of Oregon",
  "caPA" : util.CourtMatch("Commonwealth Court of Pennsylvania").setStart("Superior Court of Pennsylvania"),
  "caSC" : "Court of Appeals of South Carolina",
  "caTN" : util.CourtMatch().setStart("Court of Criminal Appeals of Tennessee")
                            .setStart("Court of Appeals of Tennessee"),
  "caTX" : util.CourtMatch().setStart("Court of Appeals of Texas"),
  "caUT" : "Court of Appeals of Utah",
  "caWA" : util.CourtMatch().setStart("Court of Appeals of Washington"),
  "caWI" : util.CourtMatch().setStart("Court of Appeals of Wisconsin"),
  "caWY" : util.CourtMatch().setStart("District Court of Wyoming"),

  "dcMD" : "United States District Court for the District of Maryland",
  "dcMNC" : "United States District Court for the Middle District of North Carolina",
  "dcEPA" : "United States District Court for the Eastern District of Pennsylvania",
  "dcWTX" : "United States District Court for the Western District of Texas",

  "minAZ" : util.CourtMatch().setStart("Superior Court of Arizona"),
  "minCA" : util.CourtMatch().setStart("Appellate Division, Superior Court of California"),
  "minCO" : util.CourtMatch().setStart("District Court of Colorado"),
  "minGA" : util.CourtMatch().setStart("Superior Court of Georgia"),
  "minMD" : util.CourtMatch().setStart("Circuit Court of Maryland"),
  "minNC" : util.CourtMatch().setStart("Superior Court of North Carolina"),
  "minNM" : util.CourtMatch().setStart("District Court of New Mexico"),
  "minWV" : util.CourtMatch().setStart("Circuit Court of West Virginia"),

  "scAK" : "Supreme Court of Alaska",
  "scAL" : "Supreme Court of Alabama",
  "scAR" : "Supreme Court of Arkansas",
  "scAZ" : "Supreme Court of Arizona",
  "scCA" : "Supreme Court of California",
  "scCO" : "Supreme Court of Colorado",
  "scCT" : "Supreme Court of Connecticut",
  "scDE" : "Supreme Court of Delaware",
  "scFL" : "Supreme Court of Florida",
  "scGA" : "Supreme Court of Georgia",
  "scGU" : "Supreme Court of Guam",
  "scHI" : "Supreme Court of Hawaii",
  "scIA" : "Supreme Court of Iowa",
  "scID" : "Supreme Court of Idaho",
  "scIL" : "Supreme Court of Illinois",
  "scIN" : "Supreme Court of Indiana",
  "scKA" : "Supreme Court of Kansas",
  "scKY" : "Supreme Court of Kentucky",
  "scLA" : "Supreme Court of Louisiana",
  "scMA" : "Supreme Judicial Court of Massachusetts",
  "scME" : "Supreme Judicial Court of Maine",
  "scMI" : "Supreme Court of Michigan",
  "scMN" : "Supreme Court of Minnesota",
  "scMO" : "Supreme Court of Missouri",
  "scMS" : "Supreme Court of Mississippi",
  "scMT" : "Supreme Court of Montana",
  "scNB" : "Supreme Court of Nebraska",
  "scNC" : "Supreme Court of North Carolina",
  "scND" : "Supreme Court of North Dakota",
  "scNH" : "Supreme Court of New Hampshire",
  "scNJ" : "Supreme Court of New Jersey",
  "scNM" : "Supreme Court of New Mexico",
  "scNV" : "Supreme Court of Nevada",
  "scNY" : "Court of Appeals of New York",
  "scOH" : "Supreme Court of Ohio",
  "scOK" : "Supreme Court of Oklahoma",
  "scOR" : "Supreme Court of Oregon",
  "scPA" : util.CourtMatch().setStart("Supreme Court of Pennsylvania"),
  "scPR" : "Supreme Court of Puerto Rico",
  "scRI" : "Supreme Court of Rhode Island",
  "scSC" : "Supreme Court of South Carolina",
  "scSD" : "Supreme Court of South Dakota",
  "scTN" : util.CourtMatch().setStart("Supreme Court of Tennessee"),
  "scTX" : util.CourtMatch("Supreme Court of Texas", "Court of Criminal Appeals of Texas"),
  "scUT" : "Supreme Court of Utah",
  "scVT" : "Supreme Court of Vermont",
  "scVA" : "Supreme Court of Virginia",
  "scWA" : "Supreme Court of Washington",
  "scWI" : "Supreme Court of Wisconsin",
  "scWV" : "Supreme Court of Appeals of West Virginia",
  "scWY" : "Supreme Court of Wyoming",
}

class NoDocketError(Exception):
  def __init__ (self, docketstr):
    self.docket = docketstr
  def __str__ (self):
    return "No docket info found for %s" % (self.docket)


def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--num", dest="num", type=int)
  parser.add_argument("-s", "--scan", dest="scan", action="store_true")
  parser.add_argument("--ifp", dest="ifp", action="store_true")
  parser.add_argument("-l", "--lower", dest="lower", type=str, nargs="*", default=None)
  parser.add_argument("--conference", dest="conference", action="store_true")
  parser.add_argument("--conf-date", dest="conf_date", type=str, default=None)
  parser.add_argument("--relists", dest="relists", action="store_true")
  parser.add_argument("--unknown", dest="unknown", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args



def scan (opts):
  ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term)) if not x.startswith(".")]
  ddirs.sort()
  for ddir in ddirs:
    if int(ddir) > 4999 and not opts.ifp:
      return

    jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, ddir)
    docket_str = "%d-%d" % (opts.term, ddir)
    if not os.path.exists(jpath):
      continue
#      raise NoDocketError(docket_str)

    docket_obj = json.loads(open(jpath, "rb").read())
    casename = util.buildCasename(docket_obj)
    casetype = util.getCaseType(docket_obj)
    if opts.unknown:
      if docket_obj["LowerCourt"]:
        if docket_obj["LowerCourt"] not in LCNAMEMAP.values():
          print("[%s] Unknown Lower Court: %s" % (docket_str, docket_obj["LowerCourt"]))
      continue
      
    if opts.lower:
      if not docket_obj["LowerCourt"]:
        continue
      found = False
      for lcabbr in opts.lower:
        if LCNAMEMAP[lcabbr] == docket_obj["LowerCourt"].strip():
          found = True
      if not found:
        continue

    print("[%s][%s] %s" % (docket_str, casetype, casename))


def conference (opts):
  conf_date = opts.conf_date
  if not conf_date:
    d = datetime.date.today()
    if d.weekday() == 3:
      conf_date = d
    else:
      conf_date = d + datetime.timedelta(((3 - d.weekday()) + 7) % 7)
  conf_date = conf_date.date()
  if opts.relists:
    print("Relisted Petitions Considered at Conference on %s" % (conf_date.strftime("%Y-%m-%d")))
    print("---------------------------------------------------------")
  else:
    print("Petitions Considered at Conference on %s" % (conf_date.strftime("%Y-%m-%d")))
    print("------------------------------------------------")

  lower_set = set()
  lower_map = {}
  if opts.lower:
    for cabbr in opts.lower:
      lower_set.add(LCNAMEMAP[cabbr])
      lower_map[cabbr] = LCNAMEMAP[cabbr]
  else:
    lower_map = LCNAMEMAP

  ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term)) if not x.startswith(".")]
  ddirs.sort()
  for ddir in ddirs:
#    if int(ddir) > 4999 and not opts.ifp:
#      return

    jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, ddir)
    docket_str = "%d-%d" % (opts.term, ddir)
    if not os.path.exists(jpath):
      continue

    docket_obj = json.loads(open(jpath, "rb").read())
    info = util.DocketStatusInfo(docket_obj)

    if opts.relists:
      if len(info.distributed) < 2:
        continue

    if lower_set:
      if not docket_obj["LowerCourt"]:
        continue
      found = False
      for lc in lower_set:
        if lc == info.lowercourt:
          found = True
      if not found:
        continue

    for (edate, cdate) in info.distributed:
      if cdate == conf_date:
        cabbr = None
        for k,v in lower_map.items():
          if v == info.lowercourt:
            cabbr = k
        print ("[%s][%s][%s] %s %s" % (docket_str, info.casetype, cabbr, info.casename, info.getFlagString()))
        break


def summarize (opts):
  jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, opts.num)
  docket_str = "%d-%d" % (opts.term, opts.num)
  if not os.path.exists(jpath):
    raise NoDocketError(docket_str)

  docket_obj = json.loads(open(jpath, "rb").read())
  info = util.DocketStatusInfo(docket_obj)

  last_order = docket_obj["ProceedingsandOrder"][-1]

  print("[%s] %s %s" % (docket_str, info.casename, info.getFlagString()))
  print("  - Docketed %s" % (info.docket_date.strftime("%Y-%m-%d")))
  if info.related:
    print ("  - RELATED")
    for ri in info.related:
      print ("      (%d-%d, %s)" % (ri[0], ri[1], ri[2]))
  if info.distributed:
    print("  - Distributed: %s" % (", ".join([x[1].strftime("%Y-%m-%d") for x in info.distributed])))
  if docket_obj["LowerCourt"]:
    print("  - Lower Court")
    print("     %s" % (docket_obj["LowerCourt"]))
    print("     %s - %s" % (docket_obj["LowerCourtCaseNumbers"], docket_obj["LowerCourtDecision"]))
  if info.cert_amici:
    print("  - Cert Amici")
    for amicus in info.cert_amici:
      print("      %s" % (amicus))
  print("  - Last Order")
  print("     %s - %s" % (last_order["Date"], last_order["Text"]))
  if info.petition_path:
    qp = scotus.parse.getQP("%s/%s" % (opts.root, info.petition_path))
    if qp:
      print("  - QP")
      print("      %s" % (" ".join(qp)))


if __name__ == '__main__':
  opts = parse_args()
  if opts.conf_date:
    opts.conf_date = dateutil.parser.parse(opts.conf_date)

  if opts.scan:
    scan(opts)
  elif opts.conference:
    conference(opts)
  else:
    summarize(opts)

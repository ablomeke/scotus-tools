#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import argparse
import json
import logging
import multiprocessing
import os
import string
import sys
import unicodedata

import PyPDF2

logging.basicConfig(level=logging.INFO)

# Translation table to strip unicode punctuation, but not things like section symbols
TTABLE = { i:None for i in xrange(sys.maxunicode)
           if unicodedata.category(unichr(i)).startswith('P') }


def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--docket-num", dest="docket_num", type=int)
  parser.add_argument("-p", "--parallel", dest="parallel", default=1, type=int)
  parser.add_argument("--reindex", dest="reindex", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args


def ngrams (wlist, n):
  output = {}
  for i in range(len(wlist)-n+1):
    gram = ' '.join(wlist[i:i+n])
    output.setdefault(gram, 0)
    output[gram] += 1
  return output


def indexDocket (path):
  fnames = [x for x in os.listdir(path) if x[-4:] == ".pdf"]

  indexes = {}
  for name in fnames:
    grams = {}
    with open("%s/%s" % (path, name), "rb") as fo:
      reader = PyPDF2.PdfFileReader(fo)
      words = []
      for page in range(reader.numPages):
        clean_text = reader.getPage(page).extractText().lower().translate(TTABLE)
        words.extend(clean_text.split())

      grams["1-gram"] = ngrams(words, 1)
      grams["2-gram"] = ngrams(words, 2)
      indexes[name] = grams

  with open("%s/indexes.json" % (path), "w+") as ij:
    logging.debug("Writing index json")
    ij.write(json.dumps(indexes))
    

if __name__ == '__main__':
  opts = parse_args()

  rootpath = "%s/OT-%d/dockets" % (opts.root, opts.term)
  pool = multiprocessing.Pool(processes = opts.parallel)

  for name in os.listdir(rootpath):
    dpath = "%s/%s" % (rootpath, name)
    if os.path.isdir(dpath):
      if os.path.exists("%s/indexes.json" % (dpath)) and not opts.reindex:
        continue
      logging.info("Indexing %s" % (dpath))
      indexDocket(dpath)

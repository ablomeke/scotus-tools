#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

from __future__ import absolute_import, print_function

import argparse
import json
import logging
import os
import os.path
import sys

import BeautifulSoup as BS
import requests

import scotus.util

JSONBASE = "https://www.supremecourt.gov/rss/cases/JSON/"
HEADERS = {"User-Agent" : "SCOTUS Legacy Docket Builder (https://github.com/fterbo/scotus-tools)"}
URL = "https://www.supremecourt.gov/search.aspx?filename=/docket/docketfiles/html/public/%s.html"

def GET (url):
  logging.debug("GET: %s" % (url))
  return requests.get(url, headers=HEADERS)

def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--docket-num", dest="docket_num", type=int)
  parser.add_argument("-A", "--application", dest="application", default=False, action="store_true")
  parser.add_argument("--debug", dest="debug", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args

class FuzzyMatch(object):
  def __init__ (self, *args):
    self.names = args
    self.start = []
    self.partial = None

  def __eq__ (self, val):
    if not val:
      return False
    if val in self.names:
      return True
    if self.start:
      for frag in self.start:
        if val.startswith(frag):
          return True
    if self.partial and val.count(self.partial):
      return True
    return False

  def __ne__ (self, val):
    return not self == val

  def setStart (self, val):
    self.start.append(val)
    return self

  def setPartial (self, val):
    self.partial = val
    return self

def parseLink (ltext, rcell):
  return {"Links" : ltext}

def parseTitle (ltext, rcell):
  span = rcell.find("span")
  if len(span.contents) == 5:
    return { "PetitionerTitle" : span.contents[0], "RespondentTitle" : span.contents[4] }
  elif len(span.contents) == 2:
    return { "PetitionerTitle" : span.contents[0] }
  logging.info(span.contents)
  raise ValueError()

KEYFUNC_MAP = {
  parseLink : FuzzyMatch().setStart("Linked with"),
  parseTitle : "Title:"
}

TRANS_TABLE = {
  "Case Numbers:" : "LowerCourtCaseNumbers",
  "Decision Date:" : "LowerCourtDecision",
  "Rehearing Denied:" : "LowerCourtRehearingDenied",
  "Lower Ct:" : "LowerCourt",
  "Docketed:" : "DocketedDate"
}

def simpleTranslate (ltext, rtext):
  return { TRANS_TABLE[ltext] : rtext }

def generateDocket (opts):
  content = getPage(opts)
  dom = BS.BeautifulSoup(content, convertEntities = BS.BeautifulSoup.HTML_ENTITIES)

  dstr = scotus.util.buildDocketStr(opts)
  dobj = {"bCapitalCase" : False, "CaseNumber" : dstr, "Petitioner" : [], "Respondent" : [], "Other" : []}

  dtable = dom.find("table", {"id" : "docketinfo"})
  started = False
  for row in dtable.findAll("tr"):
    if row.get("style") == "display:none":
      continue
    if not started:
      cell = row.find("td")
      if cell.get("class") == "InfoTitle":
        started = True
        if cell.text.count("CAPITAL"):
          dobj["bCapitalCase"] = True
        continue
    else:
      (lcell, rcell) = row.findAll("td")
      if lcell.text in TRANS_TABLE:
        dobj.update(simpleTranslate(lcell.text, rcell.text))
      else:
        for k,v in KEYFUNC_MAP.items():
          if v == lcell.text:
            dobj.update(k(lcell.text, rcell))
            break

  plist = []
  ptable = dom.find("table", {"id" : "proceedings"})
  for row in ptable.findAll("tr")[1:]:
    (lcell, rcell) = row.findAll("td")
    if lcell.get("class") == "borderbttm":
      continue
    edata = { "Date" : lcell.text, "Text" : rcell.text }
    plist.append(edata)

  dobj["ProceedingsandOrder"] = plist

  ctable = dom.find("table", {"id": "Contacts"})
  in_pet = in_resp = in_other = False
  for cell in ctable.findAll("td"):
    if cell.get("class") == "ContactSubHeader":
      if cell.text == "Attorneys for Petitioners":
        in_resp = False
        in_other = False
        in_pet = True
      elif cell.text.startswith("Attorneys for Respondent"):
        in_pet = False
        in_other = False
        in_resp = True
      elif cell.text == "Other":
        in_pet = False
        in_resp = False
        in_other = True
      else:
        in_pet = False
        in_resp = False
        in_other = False
      continue
    elif cell.get("class") == "ContactData2":
      parts = cell.contents
      pd = {"Attorney" : " ".join(parts[0].split()), "PrisonerId" : None, "IsCounselofRecord" : False}
      if len(parts) == 3 and parts[2].strip() == "Counsel of Record":
        pd["IsCounselofRecord"] = True
      if in_pet:
        dobj["Petitioner"].append(pd)
      elif in_resp:
        dobj["Respondent"].append(pd)
      elif in_other:
        dobj["Other"].append(pd)


  if opts.application:
    droot = "%s/OT-%d/dockets/A/%d" % (opts.root, opts.term, opts.docket_num)
  else:
    droot = "%s/OT-%d/dockets/%d" % (opts.root, opts.term, opts.docket_num)
  with open("%s/docket.json" % (droot), "w+") as df:
    df.write(json.dumps(dobj))

  logging.info("[%s] Created docket json" % (dstr))


def getPage (opts):
  dstr = scotus.util.buildDocketStr(opts)

  if opts.application:
    droot = "%s/OT-%d/dockets/A/%d" % (opts.root, opts.term, opts.docket_num)
  else:
    droot = "%s/OT-%d/dockets/%d" % (opts.root, opts.term, opts.docket_num)

  local_path = "%s/legacy.html" % (droot)
  if not os.path.exists(droot):
    os.makedirs(droot)

  if not os.path.exists(local_path):
    jr = GET("%s%s.json" % (JSONBASE, dstr))
    if jr.status_code == 200:
      logging.error("[%s] Not a legacy docket" % (dstr))
      with open("%s/docket.json" % (droot), "w+") as jdf:
        jdf.write(jr.content)
      sys.exit(1)

    r = requests.get(URL % (dstr))
    if r.status_code == 200:
      with open(local_path, "w+") as dhtml:
        dhtml.write(r.content)
      return r.content
    else:
      logging.error(r.status_code)
      sys.exit(1)
  else:
    content = open(local_path, "rb").read()
    return content

if __name__ == '__main__':
  opts = parse_args()

  if opts.debug:
    logging.basicConfig(level=logging.DEBUG)
  else:
    logging.basicConfig(level=logging.INFO)

  generateDocket(opts)


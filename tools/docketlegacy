#!/usr/bin/env python

# Copyright (c) 2018-2019  Floyd Terbo

from __future__ import absolute_import, print_function

import argparse
import json
import logging
import os
import os.path
import sys

import BeautifulSoup as BS

import scotus.util

HEADERS = {"User-Agent" : "SCOTUS Legacy Docket Builder (https://github.com/fterbo/scotus-tools)"}

def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--docket-num", dest="docket_num", type=int)
  parser.add_argument("-A", "--application", dest="application", default=False, action="store_true")
  parser.add_argument("--debug", dest="debug", action="store_true")
  parser.add_argument("--force", dest="force", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args

class FuzzyMatch(object):
  def __init__ (self, *args):
    self.names = args
    self.start = []
    self.partial = None

  def __eq__ (self, val):
    if not val:
      return False
    if val in self.names:
      return True
    if self.start:
      for frag in self.start:
        if val.startswith(frag):
          return True
    if self.partial and val.count(self.partial):
      return True
    return False

  def __ne__ (self, val):
    return not self == val

  def setStart (self, val):
    self.start.append(val)
    return self

  def setPartial (self, val):
    self.partial = val
    return self

def parseLink (ltext, rcell):
  return {"Links" : ltext}

def parseTitle (ltext, rcell):
  span = rcell.find("span")
  if len(span.contents) == 5:
    return { "PetitionerTitle" : span.contents[0], "RespondentTitle" : span.contents[4] }
  elif len(span.contents) == 2:
    return { "PetitionerTitle" : span.contents[0] }
  logging.info(span.contents)
  raise ValueError()

KEYFUNC_MAP = {
  parseLink : FuzzyMatch().setStart("Linked with"),
  parseTitle : "Title:"
}

TRANS_TABLE = {
  "Case Numbers:" : "LowerCourtCaseNumbers",
  "Decision Date:" : "LowerCourtDecision",
  "Rehearing Denied:" : "LowerCourtRehearingDenied",
  "Lower Ct:" : "LowerCourt",
  "Docketed:" : "DocketedDate"
}

def simpleTranslate (ltext, rtext):
  return { TRANS_TABLE[ltext] : rtext }

def parseModernDocket (dom, dobj):
  dtable = dom.find("table", {"id" : "docketinfo"})
  started = False
  for row in dtable.findAll("tr"):
    if row.get("style") == "display:none":
      continue
    if not started:
      cell = row.find("td")
      if cell.get("class") == "InfoTitle":
        started = True
        if cell.text.count("CAPITAL"):
          dobj["bCapitalCase"] = True
        continue
    else:
      try:
        (lcell, rcell) = row.findAll("td")
        if lcell.text in TRANS_TABLE:
          dobj.update(simpleTranslate(lcell.text, rcell.text))
        else:
          for k,v in KEYFUNC_MAP.items():
            if v == lcell.text:
              dobj.update(k(lcell.text, rcell))
              break
      except ValueError:
        # Ignore what is likely QP cell
        logging.warning("[%s] Check for QP cell" % (dobj["CaseNumber"]))

  plist = []
  ptable = dom.find("table", {"id" : "proceedings"})
  for row in ptable.findAll("tr")[1:]:
    (lcell, rcell) = row.findAll("td")
    if lcell.get("class") == "borderbttm":
      continue
    edata = { "Date" : lcell.text, "Text" : rcell.text }
    plist.append(edata)

  dobj["ProceedingsandOrder"] = plist

  ctable = dom.find("table", {"id": "Contacts"})
  in_pet = in_resp = in_other = False
  for cell in ctable.findAll("td"):
    if cell.get("class") == "ContactSubHeader":
      if cell.text.startswith("Attorneys for Petitioner"):
        in_resp = False
        in_other = False
        in_pet = True
      elif cell.text.startswith("Attorneys for Respondent"):
        in_pet = False
        in_other = False
        in_resp = True
      elif cell.text == "Other":
        in_pet = False
        in_resp = False
        in_other = True
      else:
        in_pet = False
        in_resp = False
        in_other = False
      continue
    elif cell.get("class") == "ContactData2":
      pd = {"PrisonerId" : None, "IsCounselofRecord" : False}
      parts = cell.contents
      pd["Attorney"] = " ".join(parts[0].split())
      if len(parts) == 3 and parts[2].strip() == "Counsel of Record":
        pd["IsCounselofRecord"] = True
    elif cell.text.startswith("Party name:"):
      pd["PartyName"] = cell.text[12:]
      if in_other:
        dobj["Other"].append(pd)
      elif in_pet:
        dobj["Petitioner"].append(pd)
      elif in_resp:
        dobj["Respondent"].append(pd)


def getCells (tr):
  tdl = [x for x in tr.findChildren("td", recursive=False)]
  return tdl

def parseOldDocket (dom, dobj):
  dobj["oldurl"] = True

  metalist = dom.findAll("meta")
  metasource = False
  for elem in metalist:
    try:
      if elem["name"] == "Petitioner":
        dobj["PetitionerTitle"] = elem["content"]
      elif elem["name"] == "Respondent":
        dobj["RespondentTitle"] = elem["content"]
      elif elem["name"] == "Docketed":
        dobj["DocketedDate"] = elem["content"]
        metasource = True
    except KeyError:
      continue

  if not metasource:
    raise TypeError("Unknown type / empty docket")

  dtables = dom.findAll("table")
  ftables = [x for x in dtables if not x.findParent("table")]
  for table in ftables:
    if table.text.count("ADVANCED SEARCH"):
      continue

    elif table.text.count("Docketed:"):
      for row in table.findChildren("tr", recursive=False):
        cells = getCells(row)
        if len(cells) == 1:
          if cells[0].text.count("Linked with"):
            dobj["Links"] = cells[0].text
            continue

        if len(cells) != 2:
          continue

        if cells[0].text == "Lower Ct:":
          dobj["LowerCourt"] = cells[1].text
        elif cells[0].text.count("No."):
          if cells[1].text.count("CAPITAL"):
            dobj["bCapitalCase"] = True

    elif table.text.count("Case Nos.:"):
      for row in table.findChildren("tr", recursive=False):
        cells = getCells(row)
        if len(cells) != 2:
          continue
        if cells[0].text == "Case Nos.:":
          dobj["LowerCourtCaseNumbers"] = cells[1].text
        elif cells[0].text == "Decision Date:":
          dobj["LowerCourtDecision"] = cells[1].text

    elif table.text.count("Proceedings"):
      plist = []
      for row in table.findChildren("tr"):
        cells = getCells(row)
        if len(cells) != 2:
          continue
        if cells[0].text.startswith("~~"):
          continue
        plist.append({"Date" : cells[0].text, "Text" : cells[1].text})
      dobj["ProceedingsandOrder"] = plist

    elif table.text.count("~~Phone"):
      in_petitioner = in_respondent = in_other = in_atty = False
      for row in table.findChildren("tr"):
        cells = getCells(row)
        ctext = cells[0].text.replace(u'\xa0', ' ')
        if ctext.count("~~"):
          continue
        if len(cells) == 3:
          if ctext.startswith("Attorneys for Petitioner"):
            in_petitioner = True
            in_respondent = in_other = False
          elif ctext.startswith("Attorneys for Respondent"):
            in_respondent = True
            in_petitioner = in_other = False
          elif ctext.count("Other:"):
            in_other = True
            in_respondent = in_petitioner = False
          elif ctext.count("Counsel of Record"):
            pd["IsCounselofRecord"] = True
          elif not ctext.strip():
            continue
          else:
            pd = {"PrisonerId" : None, "IsCounselofRecord" : False}
            pd["Attorney"] = " ".join(ctext.split())
        elif len(cells) == 1:
          if ctext.startswith("Party name:"):
            pd["PartyName"] = ctext[12:]
            if in_other:
              dobj["Other"].append(pd)
            elif in_petitioner:
              dobj["Petitioner"].append(pd)
            elif in_respondent:
              dobj["Respondent"].append(pd)

    else:
      continue



def generateDocket (opts):
  content,old = getPage(opts)
  dom = BS.BeautifulSoup(content, convertEntities = BS.BeautifulSoup.HTML_ENTITIES)

  dstr = scotus.util.buildDocketStr(opts)
  dobj = {"bCapitalCase" : False, "CaseNumber" : dstr, "Petitioner" : [], "Respondent" : [], "Other" : [],
          "LowerCourt" : ""}

  if not old:
    parseModernDocket(dom, dobj)
  else:
    parseOldDocket(dom, dobj)

  if opts.application:
    droot = "%s/OT-%d/dockets/A/%d" % (opts.root, opts.term, opts.docket_num)
  else:
    droot = "%s/OT-%d/dockets/%d" % (opts.root, opts.term, opts.docket_num)
  with open("%s/docket.json" % (droot), "w+") as df:
    df.write(json.dumps(dobj))

  logging.info("[%s] Created docket json" % (dstr))


def getPage (opts):
  import scotus.webutils
  scotus.webutils.HEADERS = HEADERS
  return scotus.webutils.getPage(opts.term, opts.docket_num, opts.root, opts.application, opts.force)

if __name__ == '__main__':
  opts = parse_args()

  if opts.debug:
    logging.basicConfig(level=logging.DEBUG)
  else:
    logging.basicConfig(level=logging.INFO)

  generateDocket(opts)


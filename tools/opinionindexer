#!/usr/bin/env python

# Copyright (c) 2018  Floyd Terbo

import argparse
import functools
import logging
import multiprocessing
import os
import os.path
import sys

import scotus.parse

logging.basicConfig(level=logging.DEBUG)


def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-p", "--parallel", dest="parallel", default=1, type=int)
  parser.add_argument("--force-pdf", dest="force_pdf", action="store_true")
  parser.add_argument("--reindex", dest="reindex", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  args = parser.parse_args()
  return args


if __name__ == '__main__':
  opts = parse_args()

  rootpath = "%s/OT-%d/opinions" % (opts.root, opts.term)
  orootpath = "%s/OT-%d/opinions/orders" % (opts.root, opts.term)

  # If we only have one, run without the pool in case you're trying to debug something
  if opts.parallel != 1:
    pool = multiprocessing.Pool(processes = opts.parallel)

  ddirs = []
  for name in os.listdir(rootpath):
    dpath = "%s/%s" % (rootpath, name)
    if os.path.isdir(dpath):
      if os.path.exists("%s/indexes.json" % (dpath)) and not opts.reindex:
        continue
      ddirs.append(dpath)

  for name in os.listdir(orootpath):
    dpath = "%s/%s" % (orootpath, name)
    if os.path.isdir(dpath):
      if os.path.exists("%s/indexes.json" % (dpath)) and not opts.reindex:
        continue
      ddirs.append(dpath)

  if opts.parallel == 1:
    for path in ddirs:
      scotus.parse.indexDir(path, opts.force_pdf)
  else:
    pool.map(functools.partial(scotus.parse.indexDir, force_pdf=opts.force_pdf), ddirs)

